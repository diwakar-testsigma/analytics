-- Analytics database schema
-- Synced with transformation_mapping.py
-- Total tables: 25

-- ===== IDENTITY SCHEMA (3 tables) =====

CREATE TABLE IF NOT EXISTS dim_users (
    user_id INTEGER PRIMARY KEY,
    organization_id INTEGER,
    uuid VARCHAR(255),
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    company_name VARCHAR(255),
    phone VARCHAR(50),
    email VARCHAR(255),
    status VARCHAR(50),
    type VARCHAR(50),
    deleted BOOLEAN,
    last_accessed_account INTEGER,
    password_last_updated_at TIMESTAMP,
    expiry_remainder_notified_at TIMESTAMP,
    last_logged_in_at TIMESTAMP,
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    is_2fa_enabled BOOLEAN,
    user_account_id INTEGER,
    account_id INTEGER,
    account_uuid VARCHAR(255),
    join_confirmed BOOLEAN,
    is_account_owner BOOLEAN,
    account_deleted BOOLEAN,
    account_status VARCHAR(50),
    etl_timestamp TIMESTAMP
) CLUSTER BY (organization_id, created_at);

CREATE TABLE IF NOT EXISTS dim_organizations (
    organization_id INTEGER PRIMARY KEY,
    organization_uuid VARCHAR(255),
    name VARCHAR(255),
    idle_session_timeout INTEGER,
    password_expiry_days INTEGER,
    max_failed_login_attempts INTEGER,
    created_by_id INTEGER,
    updated_by_id INTEGER,
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    etl_timestamp TIMESTAMP
);

CREATE TABLE IF NOT EXISTS dim_accounts (
    account_id INTEGER PRIMARY KEY,
    organization_tsid BIGINT,
    uuid VARCHAR(255),
    name VARCHAR(255),
    url VARCHAR(500),
    status VARCHAR(50),
    product_id INTEGER,
    smtp_type VARCHAR(100),
    smtp_host VARCHAR(255),
    smtp_port INTEGER,
    smtp_email VARCHAR(255),
    auth_module_type VARCHAR(100),
    auth_provider VARCHAR(100),
    auth_enabled BOOLEAN,
    created_by_id INTEGER,
    updated_by_id INTEGER,
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    etl_timestamp TIMESTAMP
);

-- ===== MASTER SCHEMA (9 tables) =====

CREATE TABLE IF NOT EXISTS dim_tenants (
    tenant_id INTEGER PRIMARY KEY,
    tenant_tsid BIGINT,
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    email VARCHAR(255),
    company VARCHAR(255),
    phone VARCHAR(50),
    domain VARCHAR(255),
    alternative_email VARCHAR(255),
    features TEXT,
    lead_id VARCHAR(255),
    contact_id VARCHAR(255),
    hubspot_contact_id VARCHAR(255),
    is_play_ground BOOLEAN,
    referrer VARCHAR(500),
    deleted BOOLEAN,
    shard VARCHAR(50),
    database_name VARCHAR(100),
    is_beta BOOLEAN,
    signup_type VARCHAR(100),
    skip_support_channel_notifications BOOLEAN,
    status_enum VARCHAR(50),
    maintenance_enum VARCHAR(50),
    report_customization_enabled BOOLEAN,
    salesforce_account_id VARCHAR(255),
    subscribed_to_emails BOOLEAN,
    identity_account_uuid VARCHAR(255),
    identity_organization_tsid BIGINT,
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    subscription_id INTEGER,
    plan VARCHAR(100),
    plan_type VARCHAR(100),
    chargebee_id VARCHAR(255),
    no_of_projects INTEGER,
    cloud_automated_minutes_per_month INTEGER,
    local_automated_minutes_per_month INTEGER,
    block_access BOOLEAN,
    trial_period INTEGER,
    allowed_users INTEGER,
    max_projects INTEGER,
    next_renewal_at TIMESTAMP,
    total_parallel_runs INTEGER,
    additional_parallel_runs_on_cloud INTEGER,
    only_local_parallel_runs INTEGER,
    additional_parallel_runs_on_local INTEGER,
    free_additional_users INTEGER,
    allowed_queue_size INTEGER,
    free_local_only_mobile_sessions INTEGER,
    subscription_status VARCHAR(50),
    cancelled_date TIMESTAMP,
    deployment_modal VARCHAR(100),
    billing_address_line1 VARCHAR(500),
    billing_address_line2 VARCHAR(500),
    billing_country VARCHAR(100),
    billing_state VARCHAR(100),
    billing_city VARCHAR(100),
    billing_zip VARCHAR(20),
    etl_timestamp TIMESTAMP
) CLUSTER BY (tenant_tsid, created_at);

CREATE TABLE IF NOT EXISTS brg_tenant_features (
    tenant_id INTEGER,
    feature_id INTEGER,
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    tenant_feature_id INTEGER,
    feature_name VARCHAR(255),
    is_add_on BOOLEAN,
    etl_timestamp TIMESTAMP,
    PRIMARY KEY (tenant_id, feature_id)
);

CREATE TABLE IF NOT EXISTS dim_features (
    feature_id INTEGER PRIMARY KEY,
    name VARCHAR(255),
    is_premium BOOLEAN,
    tenant_id INTEGER,
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    etl_timestamp TIMESTAMP
);

CREATE TABLE IF NOT EXISTS dim_data_generators (
    generator_id INTEGER PRIMARY KEY,
    generator_tsid BIGINT,
    name VARCHAR(255),
    display_name VARCHAR(255),
    unique_id VARCHAR(255),
    fixed_arguments TEXT,
    has_data_map BOOLEAN,
    file_id INTEGER,
    created_at BIGINT,
    updated_at BIGINT,
    class_package VARCHAR(500),
    class_name VARCHAR(255),
    file_display_name VARCHAR(255),
    lib_type VARCHAR(100),
    etl_timestamp TIMESTAMP
);

CREATE TABLE IF NOT EXISTS dim_nlp_templates (
    template_id INTEGER PRIMARY KEY,
    template_tsid BIGINT,
    keyword VARCHAR(255),
    grammer TEXT,
    display_name VARCHAR(255),
    snippet_enabled BOOLEAN,
    snippet_class VARCHAR(255),
    deprecated BOOLEAN,
    is_actionable BOOLEAN,
    is_verifiable BOOLEAN,
    condition_type VARCHAR(100),
    type VARCHAR(100),
    import_to_web BOOLEAN,
    import_to_mobile_web BOOLEAN,
    import_to_android_native BOOLEAN,
    import_to_ios_native BOOLEAN,
    import_to_rest_native BOOLEAN,
    import_to_salesforce BOOLEAN,
    app_type_enum VARCHAR(50),
    loop_type VARCHAR(50),
    position INTEGER,
    application_type_id INTEGER,
    optional_template_id INTEGER,
    api_supported BOOLEAN,
    screenshot_strategy VARCHAR(100),
    created_at BIGINT,
    updated_at BIGINT,
    etl_timestamp TIMESTAMP
);

CREATE TABLE IF NOT EXISTS dim_object_types (
    object_type_id INTEGER PRIMARY KEY,
    name VARCHAR(255),
    display_name VARCHAR(255),
    class_name VARCHAR(255),
    technology VARCHAR(100),
    package_name VARCHAR(500),
    created_at BIGINT,
    updated_at BIGINT,
    etl_timestamp TIMESTAMP
);

-- ===== TENANT SCHEMA (13 tables) =====

CREATE TABLE IF NOT EXISTS dim_projects (
    project_id INTEGER PRIMARY KEY,
    project_tsid BIGINT,
    name VARCHAR(255),
    description TEXT,
    tenant_tsid BIGINT,
    has_multiple_apps BOOLEAN,
    has_multiple_versions BOOLEAN,
    demo BOOLEAN,
    time_zone VARCHAR(100),
    project_type_enum VARCHAR(50),
    created_by_id INTEGER,
    updated_by_id INTEGER,
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    created_at_epoch BIGINT,
    updated_at_epoch BIGINT,
    etl_timestamp TIMESTAMP
);

CREATE TABLE IF NOT EXISTS dim_applications (
    app_id INTEGER PRIMARY KEY,
    app_tsid BIGINT,
    name VARCHAR(255),
    description TEXT,
    tenant_tsid BIGINT,
    project_id INTEGER,
    custom_fields TEXT,
    type_enum VARCHAR(50),
    created_by_id INTEGER,
    updated_by_id INTEGER,
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    created_at_epoch BIGINT,
    updated_at_epoch BIGINT,
    etl_timestamp TIMESTAMP
);

CREATE TABLE IF NOT EXISTS dim_test_cases (
    test_case_id INTEGER PRIMARY KEY,
    test_case_tsid BIGINT,
    name VARCHAR(255),
    description TEXT,
    tenant_tsid BIGINT,
    priority_id INTEGER,
    priority VARCHAR(50),
    type VARCHAR(50),
    application_version_id INTEGER,
    app_id INTEGER,
    is_data_driven BOOLEAN,
    is_step_group BOOLEAN,
    is_ai_generated BOOLEAN,
    is_manual BOOLEAN,
    is_active BOOLEAN,
    is_reviewed BOOLEAN,
    is_prerequisite_case BOOLEAN,
    is_under_deletion BOOLEAN,
    status_enum VARCHAR(50),
    create_type_enum VARCHAR(50),
    update_type_enum VARCHAR(50),
    reviewed_by INTEGER,
    last_run_id INTEGER,
    pre_requisite INTEGER,
    assignee INTEGER,
    deleted BOOLEAN,
    has_error BOOLEAN,
    reviewed_at TIMESTAMP,
    review_submitted_at TIMESTAMP,
    review_submitted_by INTEGER,
    draft_at TIMESTAMP,
    draft_by INTEGER,
    obsolete_by INTEGER,
    obsolete_at TIMESTAMP,
    ready_at TIMESTAMP,
    ready_by INTEGER,
    has_after_test BOOLEAN,
    after_test_parent_id INTEGER,
    is_eligible_for_after_suite BOOLEAN,
    consider_visual_test_result BOOLEAN,
    step_group_usage_count INTEGER,
    base_url VARCHAR(1000),
    base_app_id INTEGER,
    base_app_version_id INTEGER,
    scenario_id INTEGER,
    ai_description TEXT,
    entity_version INTEGER,
    original_entity_id INTEGER,
    delete_marker BOOLEAN,
    created_by_id INTEGER,
    updated_by_id INTEGER,
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    created_at_epoch BIGINT,
    updated_at_epoch BIGINT,
    etl_timestamp TIMESTAMP
) CLUSTER BY (tenant_tsid, created_at);

CREATE TABLE IF NOT EXISTS fct_test_steps (
    step_id INTEGER PRIMARY KEY,
    step_tsid BIGINT,
    test_case_id INTEGER,
    tenant_tsid BIGINT,
    pre_requisite INTEGER,
    step_description TEXT,
    step_order INTEGER,
    priority_enum VARCHAR(50),
    condition_type_enum VARCHAR(50),
    parent_id INTEGER,
    type_enum VARCHAR(50),
    wait_time INTEGER,
    disabled BOOLEAN,
    template_id INTEGER,
    step_group_id INTEGER,
    max_iterations INTEGER,
    max_retries INTEGER,
    action VARCHAR(500),
    teststep_key VARCHAR(255),
    expected_result TEXT,
    visual_enabled BOOLEAN,
    accessibility_enabled BOOLEAN,
    ignore_step_result BOOLEAN,
    is_manual BOOLEAN,
    is_invalid BOOLEAN,
    custom_fields TEXT,
    data_map TEXT,
    copied_from INTEGER,
    phone_number_id INTEGER,
    mail_box_id INTEGER,
    block_id INTEGER,
    kibbutz_plugin_nlp_data TEXT,
    kibbutz_plugin_tdf_data TEXT,
    kibbutz_nlp_data_map TEXT,
    kibbutz_tdf_data_map TEXT,
    data_source_id INTEGER,
    iteration_data_type_enum VARCHAR(50),
    mobile_step_action VARCHAR(255),
    mobile_test_data TEXT,
    mobile_input TEXT,
    mobile_element TEXT,
    platform VARCHAR(50),
    type_override VARCHAR(50),
    wait_time_override INTEGER,
    data_map_override TEXT,
    parent_id_override INTEGER,
    natural_text_action TEXT,
    natural_text_action_type VARCHAR(50),
    rest_api_nlp_data TEXT,
    original_step_id INTEGER,
    exception_is_expected_json TEXT,
    entity_version INTEGER,
    original_entity_id INTEGER,
    created_by_id INTEGER,
    updated_by_id INTEGER,
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    created_at_epoch BIGINT,
    updated_at_epoch BIGINT,
    etl_timestamp TIMESTAMP
);

CREATE TABLE IF NOT EXISTS fct_executions (
    execution_id INTEGER PRIMARY KEY,
    execution_tsid BIGINT,
    name VARCHAR(255),
    tenant_tsid BIGINT,
    app_version_id INTEGER,
    description TEXT,
    step_time_out INTEGER,
    page_time_out INTEGER,
    is_manual BOOLEAN,
    type VARCHAR(50),
    last_run_id INTEGER,
    match_browser_version VARCHAR(50),
    entity_type VARCHAR(50),
    screen_shot_enum VARCHAR(50),
    screen_shot_mode VARCHAR(50),
    execution_type_enum VARCHAR(50),
    recovery_action_enum VARCHAR(50),
    on_aborted_action_enum VARCHAR(50),
    re_run_on_failure_enum VARCHAR(50),
    on_group_prequisite_fail_enum VARCHAR(50),
    on_testcase_prerequisite_fail_enum VARCHAR(50),
    on_step_prequisite_fail_enum VARCHAR(50),
    slack_connector_notification_enabled BOOLEAN,
    ms_teams_connector_notification_enabled BOOLEAN,
    google_chat_connector_notification_enabled BOOLEAN,
    visual_test_result_time_out INTEGER,
    accessibility_test_enabled BOOLEAN,
    wcag_version VARCHAR(50),
    app_id INTEGER,
    result_id INTEGER,
    result_tsid BIGINT,
    result_execution_id INTEGER,
    result_enum VARCHAR(50),
    status_enum VARCHAR(50),
    message TEXT,
    start_time TIMESTAMP,
    end_time TIMESTAMP,
    duration BIGINT,
    executed_by INTEGER,
    triggered_by INTEGER,
    build_no VARCHAR(255),
    is_inprogress BOOLEAN,
    triggered_type VARCHAR(100),
    trigger_type VARCHAR(100),
    scheduled_id INTEGER,
    re_run_parent_id INTEGER,
    re_run_type_enum VARCHAR(50),
    latest_result VARCHAR(50),
    automation_result VARCHAR(50),
    result_type VARCHAR(50),
    consolidated_duration BIGINT,
    run_test_cases_in_parallel BOOLEAN,
    run_test_suites_in_parallel BOOLEAN,
    execution_visual_result VARCHAR(50),
    design_asset_visual_result VARCHAR(50),
    consolidated_visual_result VARCHAR(50),
    total_count INTEGER,
    passed_count INTEGER,
    failed_count INTEGER,
    stopped_count INTEGER,
    not_executed_count INTEGER,
    queued_count INTEGER,
    running_count INTEGER,
    is_visually_passed BOOLEAN,
    created_by_id INTEGER,
    updated_by_id INTEGER,
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    created_at_epoch BIGINT,
    updated_at_epoch BIGINT,
    etl_timestamp TIMESTAMP
) CLUSTER BY (tenant_tsid, start_time);

CREATE TABLE IF NOT EXISTS fct_test_results (
    result_id INTEGER PRIMARY KEY,
    result_tsid BIGINT,
    test_case_id INTEGER,
    test_suite_id INTEGER,
    execution_result_id INTEGER,
    test_plan_result_id INTEGER,
    tenant_tsid BIGINT,
    start_time TIMESTAMP,
    end_time TIMESTAMP,
    duration BIGINT,
    result_enum VARCHAR(50),
    status_enum VARCHAR(50),
    is_visually_passed BOOLEAN,
    message TEXT,
    metadata TEXT,
    api_test_result_id INTEGER,
    iteration INTEGER,
    test_machine_id INTEGER,
    re_run_parent_id INTEGER,
    re_run_type_enum VARCHAR(50),
    entity_version INTEGER,
    original_entity_id INTEGER,
    is_queued BOOLEAN,
    automation_result VARCHAR(50),
    is_migrated_execution BOOLEAN,
    failed_or_aborted_by INTEGER,
    result_type VARCHAR(50),
    test_case_order INTEGER,
    test_suite_order INTEGER,
    execution_initiated_date TIMESTAMP,
    execution_order INTEGER,
    visual_result VARCHAR(50),
    design_asset_visual_result VARCHAR(50),
    consolidated_visual_result VARCHAR(50),
    created_by_id INTEGER,
    updated_by_id INTEGER,
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    created_at_epoch BIGINT,
    updated_at_epoch BIGINT,
    etl_timestamp TIMESTAMP
) CLUSTER BY (tenant_tsid, start_time);

CREATE TABLE IF NOT EXISTS dim_elements (
    element_id INTEGER PRIMARY KEY,
    element_tsid BIGINT,
    name VARCHAR(255),
    tenant_tsid BIGINT,
    application_version_id INTEGER,
    screen_name VARCHAR(255),
    locator_type VARCHAR(100),
    locator_value TEXT,
    created_by_id INTEGER,
    updated_by_id INTEGER,
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    created_at_epoch BIGINT,
    updated_at_epoch BIGINT,
    etl_timestamp TIMESTAMP
);

CREATE TABLE IF NOT EXISTS dim_test_data (
    test_data_id INTEGER PRIMARY KEY,
    test_data_tsid BIGINT,
    name VARCHAR(255),
    tenant_tsid BIGINT,
    description TEXT,
    last_used_at_epoch BIGINT,
    created_by_id INTEGER,
    updated_by_id INTEGER,
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    created_at_epoch BIGINT,
    updated_at_epoch BIGINT,
    etl_timestamp TIMESTAMP
);

CREATE TABLE IF NOT EXISTS dim_agents (
    agent_id INTEGER PRIMARY KEY,
    agent_uuid BIGINT,
    name VARCHAR(255),
    config_json TEXT,
    status VARCHAR(50),
    tenant_id BIGINT,
    system_id INTEGER,
    version VARCHAR(100),
    enabled BOOLEAN,
    visible_to_all BOOLEAN,
    mobile_enabled BOOLEAN,
    is_active BOOLEAN,
    is_docker BOOLEAN,
    is_service BOOLEAN,
    is_obsolete BOOLEAN,
    agent_type VARCHAR(100),
    drifter_version VARCHAR(100),
    max_sessions INTEGER,
    log_level VARCHAR(50),
    last_pinged_at TIMESTAMP,
    created_by_id INTEGER,
    updated_by_id INTEGER,
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    created_at_epoch BIGINT,
    updated_at_epoch BIGINT,
    etl_timestamp TIMESTAMP
);

CREATE TABLE IF NOT EXISTS fct_api_steps (
    api_step_id INTEGER PRIMARY KEY,
    api_step_tsid BIGINT,
    test_result_id INTEGER,
    tenant_tsid BIGINT,
    step_order INTEGER,
    request_url VARCHAR(2000),
    request_method VARCHAR(20),
    response_status INTEGER,
    response_time BIGINT,
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    created_at_epoch BIGINT,
    updated_at_epoch BIGINT,
    etl_timestamp TIMESTAMP
);

CREATE TABLE IF NOT EXISTS fct_accessibility_results (
    accessibility_result_id INTEGER PRIMARY KEY,
    accessibility_result_tsid BIGINT,
    test_result_id INTEGER,
    tenant_tsid BIGINT,
    rule_id VARCHAR(255),
    impact VARCHAR(50),
    help_url VARCHAR(1000),
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    created_at_epoch BIGINT,
    updated_at_epoch BIGINT,
    etl_timestamp TIMESTAMP
);

CREATE TABLE IF NOT EXISTS dim_test_suites (
    test_suite_id INTEGER PRIMARY KEY,
    test_suite_tsid BIGINT,
    name VARCHAR(255),
    description TEXT,
    tenant_tsid BIGINT,
    app_version_id INTEGER,
    action_id INTEGER,
    pre_requisite INTEGER,
    is_manual BOOLEAN,
    entity_type VARCHAR(50),
    total_test_cases_count INTEGER,
    after_suite_parent_id INTEGER,
    has_after_suite BOOLEAN,
    dynamic_filter_id INTEGER,
    dynamic_filter_query TEXT,
    dynamic_pageable BOOLEAN,
    copied_from INTEGER,
    last_run_id INTEGER,
    created_by_id INTEGER,
    updated_by_id INTEGER,
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    created_at_epoch BIGINT,
    updated_at_epoch BIGINT,
    app_id INTEGER,
    suite_id INTEGER,
    etl_timestamp TIMESTAMP
);

CREATE TABLE IF NOT EXISTS fct_cross_tenant_metrics (
    metric_id INTEGER PRIMARY KEY,
    metric_tsid BIGINT,
    tenant_id INTEGER,
    metric_date DATE,
    total_users INTEGER,
    active_users INTEGER,
    total_test_cases INTEGER,
    total_executions INTEGER,
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    created_at_epoch BIGINT,
    updated_at_epoch BIGINT,
    etl_timestamp TIMESTAMP
);

CREATE TABLE IF NOT EXISTS fct_test_plan_results (
    test_plan_result_id INTEGER PRIMARY KEY,
    test_plan_result_tsid BIGINT,
    test_plan_id INTEGER,
    tenant_tsid BIGINT,
    execution_result_id INTEGER,
    start_time TIMESTAMP,
    end_time TIMESTAMP,
    duration BIGINT,
    result VARCHAR(50),
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    created_at_epoch BIGINT,
    updated_at_epoch BIGINT,
    etl_timestamp TIMESTAMP
);

CREATE TABLE IF NOT EXISTS fct_agent_activity (
    activity_id INTEGER PRIMARY KEY,
    activity_tsid BIGINT,
    agent_id INTEGER,
    tenant_tsid BIGINT,
    test_result_id INTEGER,
    start_time TIMESTAMP,
    end_time TIMESTAMP,
    action VARCHAR(500),
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    created_at_epoch BIGINT,
    updated_at_epoch BIGINT,
    etl_timestamp TIMESTAMP
);

CREATE TABLE IF NOT EXISTS fct_audit_events (
    event_id INTEGER PRIMARY KEY,
    event_tsid BIGINT,
    event_uuid VARCHAR(255),
    tenant_tsid BIGINT,
    entity_tag VARCHAR(255),
    entity_type VARCHAR(255),
    entity_parent_id INTEGER,
    entity_id INTEGER,
    action VARCHAR(255),
    previous_entity_data TEXT,
    new_entity_data TEXT,
    changes_json TEXT,
    actor_id INTEGER,
    actor_account_uuid VARCHAR(255),
    actor_uuid VARCHAR(255),
    ip_address VARCHAR(50),
    timestamp TIMESTAMP,
    custom_fields TEXT,
    status VARCHAR(50),
    message TEXT,
    created_by_id INTEGER,
    updated_by_id INTEGER,
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    created_at_epoch BIGINT,
    updated_at_epoch BIGINT,
    etl_timestamp TIMESTAMP
);